{"ast":null,"code":"var _jsxFileName = \"/Users/luisrubio/code/automate-kaizen/src/components/tiles/DynamicTile.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DynamicTile = props => {\n  const data = props.data;\n  let barLength = 0;\n  let totalCompleted = 0;\n  data.forEach(task => {\n    if (task.completed) {\n      totalCompleted++;\n    }\n  });\n\n  if (totalCompleted === 100) {\n    barLength = 97.5;\n  } else {\n    barLength = totalCompleted;\n  }\n\n  const barSize = {\n    height: barLength + '%'\n  };\n  let percentage = Math.round(totalCompleted / data.length * 100);\n  return React.createElement(\"div\", {\n    className: \"col-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: '/cat/' + props.to,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"tile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'bar b-warning',\n    style: barSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, props.top), React.createElement(\"div\", {\n    className: \"tile-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: props.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, totalCompleted, \"/\", props.data.length, \" Completed - \", percentage, \"%\")))));\n};\n\nexport default DynamicTile;","map":{"version":3,"sources":["/Users/luisrubio/code/automate-kaizen/src/components/tiles/DynamicTile.js"],"names":["React","Link","DynamicTile","props","data","barLength","totalCompleted","forEach","task","completed","barSize","height","percentage","Math","round","length","to","top","icon"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,cAAc,GAAG,CAArB;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAaC,IAAI,IAAI;AACnB,QAAIA,IAAI,CAACC,SAAT,EAAoB;AAClBH,MAAAA,cAAc;AACf;AACF,GAJD;;AAMA,MAAIA,cAAc,KAAK,GAAvB,EAA4B;AAC1BD,IAAAA,SAAS,GAAG,IAAZ;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGC,cAAZ;AACD;;AAED,QAAMI,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAEN,SAAS,GAAG;AADN,GAAhB;AAGA,MAAIO,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAYR,cAAc,GAAGF,IAAI,CAACW,MAAvB,GAAiC,GAA5C,CAAjB;AACA,SACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,UAAUZ,KAAK,CAACa,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE,eAAhB;AAAiC,IAAA,KAAK,EAAEN,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMP,KAAK,CAACc,GAAZ,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAEd,KAAK,CAACe,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,cADH,OACoBH,KAAK,CAACC,IAAN,CAAWW,MAD/B,mBACoDH,UADpD,MALF,CAFF,CADF,CADF,CADF;AAkBD,CAtCD;;AAwCA,eAAeV,WAAf","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DynamicTile = props => {\n  const data = props.data;\n  let barLength = 0;\n  let totalCompleted = 0;\n  data.forEach(task => {\n    if (task.completed) {\n      totalCompleted++;\n    }\n  });\n\n  if (totalCompleted === 100) {\n    barLength = 97.5;\n  } else {\n    barLength = totalCompleted;\n  }\n\n  const barSize = {\n    height: barLength + '%'\n  };\n  let percentage = Math.round((totalCompleted / data.length) * 100);\n  return (\n    <div className=\"col-2\">\n      <Link to={'/cat/' + props.to}>\n        <div className=\"tile\">\n          <div className={'bar b-warning'} style={barSize}></div>\n          <div className=\"text\">\n            <div>{props.top}</div>\n            <div className=\"tile-icon\">\n              <i className={props.icon}></i>\n            </div>\n            <div>\n              {totalCompleted}/{props.data.length} Completed - {percentage}%\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default DynamicTile;\n"]},"metadata":{},"sourceType":"module"}