{"ast":null,"code":"var _jsxFileName = \"/Users/luisrubio/code/automate-kaizen/src/components/tiles/DynamicTile.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DynamicTile = props => {\n  const data = props.data;\n  let barLength = 0;\n  let totalCompleted = 0;\n  data.forEach(task => {\n    if (task.completed) {\n      totalCompleted++;\n    }\n  });\n  let percentage = Math.round(totalCompleted / data.length * 100);\n  let color;\n\n  if (percentage === 100) {\n    barLength = 97.5;\n  } else {\n    barLength = percentage;\n  }\n\n  if (percentage === 100) {\n    color = 'b-100';\n  } else if (percentage > 74) {\n    color = 'b-75';\n  } else if (percentage > 49) {\n    color = 'b-50';\n  } else if (percentage > 24) {\n    color = 'b-25';\n  } else {\n    color = 'b-25';\n  }\n\n  const barSize = {\n    height: barLength + '%'\n  };\n  let display;\n\n  if (data.length > 0) {\n    display = React.createElement(Link, {\n      to: '/cat/' + props.to,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'bar ' + color,\n      style: barSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, props.top), React.createElement(\"div\", {\n      className: \"tile-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: props.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, totalCompleted, \"/\", props.data.length, \" Completed - \", percentage, \"%\"))));\n  } else {\n    display = React.createElement(\"div\", {\n      className: \"tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, props.top), React.createElement(\"div\", {\n      className: \"tile-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: props.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, totalCompleted, \"/\", props.data.length, \" Completed - \", percentage, \"%\")));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"col-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: '/cat/' + props.to,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"tile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'bar ' + color,\n    style: barSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, props.top), React.createElement(\"div\", {\n    className: \"tile-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: props.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, totalCompleted, \"/\", props.data.length, \" Completed - \", percentage, \"%\")))));\n};\n\nexport default DynamicTile;","map":{"version":3,"sources":["/Users/luisrubio/code/automate-kaizen/src/components/tiles/DynamicTile.js"],"names":["React","Link","DynamicTile","props","data","barLength","totalCompleted","forEach","task","completed","percentage","Math","round","length","color","barSize","height","display","to","top","icon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DynamicTile = props => {\n  const data = props.data;\n  let barLength = 0;\n  let totalCompleted = 0;\n  data.forEach(task => {\n    if (task.completed) {\n      totalCompleted++;\n    }\n  });\n  let percentage = Math.round((totalCompleted / data.length) * 100);\n  let color;\n\n  if (percentage === 100) {\n    barLength = 97.5;\n  } else {\n    barLength = percentage;\n  }\n\n  if (percentage === 100) {\n    color = 'b-100';\n  } else if (percentage > 74) {\n    color = 'b-75';\n  } else if (percentage > 49) {\n    color = 'b-50';\n  } else if (percentage > 24) {\n    color = 'b-25';\n  } else {\n    color = 'b-25';\n  }\n\n  const barSize = {\n    height: barLength + '%'\n  };\n\n  let display;\n  if (data.length > 0) {\n    display = (\n      <Link to={'/cat/' + props.to}>\n        <div className=\"tile\">\n          <div className={'bar ' + color} style={barSize}></div>\n          <div className=\"text\">\n            <div>{props.top}</div>\n            <div className=\"tile-icon\">\n              <i className={props.icon}></i>\n            </div>\n            <div>\n              {totalCompleted}/{props.data.length} Completed - {percentage}%\n            </div>\n          </div>\n        </div>\n      </Link>\n    );\n  } else {\n    display = (\n      <div className=\"tile\">\n        <div className=\"bar\"></div>\n        <div className=\"text\">\n          <div>{props.top}</div>\n          <div className=\"tile-icon\">\n            <i className={props.icon}></i>\n          </div>\n          <div>\n            {totalCompleted}/{props.data.length} Completed - {percentage}%\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"col-2\">\n      <Link to={'/cat/' + props.to}>\n        <div className=\"tile\">\n          <div className={'bar ' + color} style={barSize}></div>\n          <div className=\"text\">\n            <div>{props.top}</div>\n            <div className=\"tile-icon\">\n              <i className={props.icon}></i>\n            </div>\n            <div>\n              {totalCompleted}/{props.data.length} Completed - {percentage}%\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default DynamicTile;\n"]},"metadata":{},"sourceType":"module"}